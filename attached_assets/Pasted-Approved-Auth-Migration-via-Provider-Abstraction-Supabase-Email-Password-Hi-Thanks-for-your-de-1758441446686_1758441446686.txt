Approved: Auth Migration via Provider Abstraction (Supabase Email/Password)

Hi,

Thanks for your detailed assessment. After reviewing your recommendations, I’m approving the enhanced approach you suggested. Please proceed with the migration using the auth provider abstraction (AUTH_PROVIDER = replit | supabase) and the Supabase adapter.

Here are my requirements in detail:

Scope & Approach (non-negotiable)

Build the auth provider abstraction layer first, so we can switch between Replit and Supabase with a feature flag.

Implement Supabase Auth (Email/Password) adapter.

Map users by email only (do not change internal IDs).

Keep our existing RBAC roles and warehouse scopes exactly as they are in our DB.

Use a feature flag cutover for safe rollback. Keep both providers working behind the abstraction until final cutover.

After successful cutover, remove all Replit OIDC code, SDKs, middleware, envs, and UI buttons completely—no dead code, no file pile-up.

Deliverables

Backend: JWT middleware for Supabase tokens; admin endpoints for create user, deactivate/activate, reset password, update display name.

Frontend: Supabase Email/Password login flow; Admin Users screen (create, deactivate, reset, edit display name).

Data: Add auth_provider_user_id column if missing, map users by email.

Cleanup: Remove all Replit auth code and dependencies.

Tests (CI must be green):

Auth (valid/expired/invalid token)

RBAC enforcement by role

Warehouse scoping

Admin actions (create/deactivate/reset)

Regression tests (central FX only, immutability of linked records, approvals).

Docs: Update README with env vars (SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY, AUTH_PROVIDER), setup steps, Admin Users usage, and rollback instructions.

Evidence: Provide demo (screenshots or video) showing:

Admin creates user → user logs in

Admin deactivates user → access denied

Admin triggers reset → user sets new password and logs in

Timeline (target)

Days 1–2: Abstraction layer + Supabase setup

Days 3–4: Frontend auth + admin endpoints

Days 5–6: User mapping + testing

Days 7–8: Cutover + remove Replit code + smoke tests

Non-negotiables

Service role key must be server-side only (never exposed to the browser).

No per-transaction FX overrides; central FX only.

Linked records remain immutable (reverse/reclass only).

No partial shipping or stopping mid-stage.

Confirm Before Starting

Final list of env vars you’ll add/change.

Exact user migration plan for our ≤10 users (email mapping steps).

Rollback switch (AUTH_PROVIDER) tested in dev before production cutover.

⚡ Important: I do not accept incomplete work or partial deliveries. Every step must be completed cleanly, fully tested, and properly documented. You must use OpenAI ChatGPT-5 during implementation for code reviews, static analysis, gap detection, and test generation.

Please reply “ACK” with the PR breakdown and final migration plan, then proceed.
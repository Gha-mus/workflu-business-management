# Complete the Remaining Work — Stage-by-Stage, End-to-End (with OpenAI Assist)

Hi,

You’ve made good progress on structure and core routes, but the workflow is still **not fully compliant** with `docs/workflow_reference.json`.
Below is a **non-negotiable, stage-by-stage checklist** of everything that must be completed. Use **OpenAI only for analysis, static reviews, gap detection, and test generation** (no translation work). **Do not stop** or ship partial changes; move stage by stage and mark each one **DONE** only when all acceptance tests pass.

> **Important guardrails**
>
> * No new translation systems or i18n are in scope.
> * Central FX must come **only** from Settings; no per-transaction FX input is allowed.
> * Linked records must be immutable (reversals only).
> * Every stage must include: **Back-end logic, front-end UX, validations, and automated tests**.

---

## Stage 1 — Working Capital (Ledger & Controls)

**Back-end**

* Enforce **central FX only**: strip any `fxRate` coming from clients; fetch via one function `getCentralExchangeRate()` from Settings.
* Implement **Prevent Negative Balance** (toggle in Settings). If ON, block any `CapitalOut` that would make balance < 0.
* Lock linked entries (Purchase/Shipping/Expense/Sales/Revenue references): disallow delete/update; allow **Reverse** or **Reclass** only.
* Support **Opening Balance** and **document numbering** for capital entries.

**Front-end**

* Settings toggle for `preventNegativeBalance`.
* Ledger page shows **historical FX** used and lock icons for linked entries.

**Tests**

* Unit/integration: central FX enforcement; negative-balance toggle ON/OFF; reverse vs delete; opening balance.
* Snapshot: Capital Movement Statement and Currency Breakdown.

**OpenAI assist**

* Static scan to confirm no route accepts client-provided FX.
* Generate test cases for edge conditions (near-zero balances).

**Acceptance**

* All capital routes reject client-side FX; negative balance protected when toggle is ON; linked entries immutable; reports match expected totals.

---

## Stage 2 — Purchases (Advances, Settlement, Capital Integration)

**Back-end**

* Advance flows: allow **Advance w/o details**, **Advance with partial details**, and **Settlement** at delivery (credit/refund handling).
* If `fundingSource === 'Capital'`, **auto-create CapitalOut** with historical FX.
* Block editing once purchase is linked to filtering/shipping/sales (approval path only).
* Require `orderId` on all operations.

**Front-end**

* Purchase form: funding source, advance capture, settlement UI.
* Supplier credit/refund view.

**Tests**

* Advance → settlement → credit/refund; auto CapitalOut creation; edit-after-link **must fail**; missing `orderId` **must fail**.

**OpenAI assist**

* Compare field names/flows to reference and suggest missing validations.

**Acceptance**

* End-to-end advance/settlement works; auto-capital entries appear; edit-locks enforced.

---

## Stage 3 — Warehouse (Statuses, Cost Re-allocation, Intake)

**Back-end**

* Implement **state machine**: `AWAITING_DECISION → AWAITING_FILTER | READY_TO_SHIP → READY_FOR_SALE | NON_CLEAN`.
* On **filtering**, re-allocate **all cost to CLEAN**; **NON\_CLEAN cost = 0**; compute yields.
* Auto-intake to **FIRST** immediately after confirmed purchase.

**Front-end**

* Tabs: Purchases, Awaiting Filter, Ready to Ship, Non-Clean Local Sale, etc.
* Show cost distribution before/after filtering.

**Tests**

* Invalid transitions must fail.
* Re-allocation math snapshot (CLEAN holds all cost; NON\_CLEAN zero).
* Auto intake to FIRST on purchase confirmation.

**OpenAI assist**

* Review state machine transitions and propose missing guards.

**Acceptance**

* Transitions guarded; re-allocation mathematically correct; auto-intake proven by tests.

---

## Stage 4 — Shipping (Legs, Commission, Inspection, Landed Cost)

**Back-end**

* **Multi-leg** shipping with net/gross/chargeable weights validation (`chargeable ≤ gross`).
* When leg funding is **Capital**, auto-create **CapitalOut** for **commission** and shipping payment.
* Arrival costs: broker/handling/delivery tracked separately with historical FX.
* **Inspection** on arrival → transfer **CLEAN** quantity to **FINAL**, record **damage loss**.
* **Landed cost** = purchase + all legs + arrival (+ packing from Stage 5).

**Front-end**

* Legs editor, commission preview, inspection UI (weights & grade), landed cost panel.

**Tests**

* Weight validations; commission math; capital integration; final warehouse transfer; landed-cost formula snapshot.

**OpenAI assist**

* Verify commission formulas and landed-cost composition; generate edge-case tests.

**Acceptance**

* Commission→CapitalOut linkage present; inspection transfers to FINAL; landed-cost matches snapshot.

---

## Stage 5 — Operating Expenses (Supplies & Consumption)

**Back-end**

* Entities: `supplies`, `supplyPurchases`, `supplyConsumption`.
* Buying supplies may use Working Capital (creates CapitalOut).
* **Consumption during packing** must **reduce supply stock** and **allocate cost to orders**; **consumption itself must NOT create Capital entries**.

**Front-end**

* Supplies inventory page (stock, average cost), consumption UI in packing workflow.

**Tests**

* Purchase supplies → pack order → consumption reduces stock and adds packing cost to order; **no CapitalOut** on consumption.

**OpenAI assist**

* Analyze cost allocation correctness and propose guardrails.

**Acceptance**

* Supplies flow complete; consumption affects order cost only; tests pass.

---

## Stage 6 — Sales (Source Warehouse, Split, Returns, Credit Limit)

**Back-end**

* Enforce source: **FIRST for NON\_CLEAN**, **FINAL for CLEAN**.
* Default: **single-order invoice** with explicit **Split** option.
* Returns must restore to **the original warehouse/order**.
* Optional **customer credit limit** with warnings/blocks.

**Front-end**

* Split control on invoice form; return to original source; credit-limit warning banner.

**Tests**

* Wrong source must fail; split behaves correctly; return to original bucket; credit limit alert triggers.

**OpenAI assist**

* Validate all invariants and generate property-based tests for split/return.

**Acceptance**

* Source rules enforced, returns correct, UI supports split, credit limits work.

---

## Stage 7 — Revenues (Ledger, Withdrawable Balance, Reinvest)

**Back-end**

* Ledger entry types: `CustomerReceipt`, `CustomerRefund`, `Withdrawal`, `ReinvestOut`, `TransferFee`, `Reclass`, `Reverse`.
* Maintain **two balances**: **Accounting Revenue** and **Withdrawable Revenue**.
* **Partner Withdrawals** only from **Withdrawable** balance; block overdrafts.
* **Reinvest to Capital** (admin-only): triple impact
  `Revenue: -ReinvestOut -TransferFee` + `Capital: +CapitalIn` + `OperatingExpenses: +TransferFee`.

**Front-end**

* Revenue ledger, withdrawable balance indicator, reinvest wizard (amount + fee).

**Tests**

* Each entry type; overdraft prevention; reinvest triple-entry consistency.

**OpenAI assist**

* Cross-check balance math and produce reconciliation cases.

**Acceptance**

* Withdrawable logic correct; reinvest posts to all three places; tests pass.

---

## Stage 8 — Users & RBAC (Policies, Visibility, Warehouse Scopes)

**Back-end**

* Multi-role users with **warehouse scoping** (e.g., `userWarehouseScopes`).
* **Sensitive-change policies**: one-time edits, ±% caps, manager approval.
* **Visibility flags** to hide costs/margins from selected roles.
* **Delete/modify protection** for linked records across all stages.

**Front-end**

* Role management UI; toggles for visibility; policy assignment panel.

**Tests**

* Access matrix by role; scoped warehouse access; policy enforcement; hidden fields not exposed by API.

**OpenAI assist**

* Generate a permissions test matrix and check for API leaks.

**Acceptance**

* RBAC + policies fully enforced; visibility respected in API and UI.

---

## Stage 9 — Reports & KPIs (Accuracy & Snapshots)

**Back-end**

* Aggregations for: Stage reports, Order summaries, Period (M/Q/Y), Global.
* KPIs: Capital Utilization, Turnover Days, Avg Cost/kg, Avg Sell Price, Damage %, Profit Margin %, Collections vs Sales, **DSO**, **Aging 30/60/90**.
* Exports: CSV/XLSX/PDF.

**Front-end**

* Dashboard cards and drill-downs; filters (period/supplier/customer/warehouse).

**Tests**

* **Snapshot tests** for aggregates and KPIs (including FX history).
* Reconciliation tests: Capital Movement = sum of entries; Currency breakdown matches historical FX.

**OpenAI assist**

* Validate formulas vs spec; flag inconsistencies on sample datasets.

**Acceptance**

* All reports match expected numbers; Aging & DSO present; exports work.

---

## Stage 10 — Settings (FX, Period Close, Numbering, Approval Thresholds)

**Back-end**

* Settings model includes:

  * **Central FX** with `effectiveFrom` and **historical log**.
  * **Period close** guard (block back-dated posts in closed periods).
  * **Document numbering schemes** (prefix-year-sequence; uniqueness; reset rules).
  * **Approval thresholds** (amount and % caps) used by `approvalMiddleware`.

**Front-end**

* Settings UI for FX (read-only for transactions), period close, numbering templates, thresholds.

**Tests**

* Transactions cannot override FX; closed period posts fail; numbering uniqueness; thresholds enforced.

**OpenAI assist**

* Scan for any route that bypasses settings; propose missing tests.

**Acceptance**

* FX/period close/numbering/thresholds are enforced everywhere; tests pass.

---

## Cross-cutting Tasks (All Stages)

* **Immutability & Reverse**: any linked entity uses **Reverse/Reclass** patterns instead of delete/update.
* **Notifications**: alerts for approvals, credit limit, policy violations, and task failures.
* **Error handling & toasts**: no noisy console logs in production; user-friendly errors.
* **Docs**: keep `docs/workflow_reference.json` as the single source of truth; record any deviations.
* **Automation script**: add to `package.json`

  ```json
  {
    "scripts": {
      "audit:workflow": "ts-node scripts/analyzeWorkflow.ts --full"
    }
  }
  ```

  Run it on every push. Use OpenAI to highlight gaps and propose tests—**do not use it for translation**.

---

## Delivery Rules (Do Not Stop Early)

1. Work **stage by stage** in order (1 → 10).
2. For each stage, deliver: code, UI, validations, tests, and a short **“Stage Compliance Report”** summarizing what changed and linking PRs.
3. **Do not mark a stage DONE** until **all** acceptance checks above are green and the workflow audit passes.
4. After finishing Stage 10, **re-run** the full audit and **fix anything remaining**. Only then consider the implementation complete.

Thanks—please start with **Stage 1** now and proceed without pausing until all ten stages meet the spec.
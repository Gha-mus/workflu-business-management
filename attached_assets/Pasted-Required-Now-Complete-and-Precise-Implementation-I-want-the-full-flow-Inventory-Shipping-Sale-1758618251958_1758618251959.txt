Required Now (Complete and Precise Implementation)

I want the full flow Inventory → Shipping → Sales implemented with our carton/weight rules, and with automatic deduction between warehouses. You already have the reference file I shared earlier, so adjust existing parts where needed and fill in missing parts only. Do not create extra files or duplicate systems unless strictly necessary.

1) Measurement Units (Foundation of All Calculations)

Base unit for accounting and storage = kilogram (kg). All movements are stored and calculated in kg in the database.

Carton 20kg (C20): Shipping unit. Shipments are created and deducted using this unit from the First Warehouse.

Rule: 1 C20 = 20 kg.

Carton 8kg (C8): Sales unit. Sales orders are created and deducted using this unit from the Final Warehouse.

Rule: 1 C8 = 8 kg.

Conversion between cartons (for display/reporting only):

1 C20 = 2.5 C8

1 C8 = 0.4 C20

Golden Rule: Data is always stored and deducted in kg. Cartons are for UI and reports only.

2) Warehouses and Deduction (Link Between First and Final)

First Warehouse: Receives initial inputs and is used for shipping. Any shipment created here deducts from First (in kg).

Final Warehouse: Used for sales. Any confirmed sales order deducts from Final (in kg).

Quality/Filtering (Execute Filter / QC):

Operation splits quantity into Clean and Non-Clean (in kg).

Clean → transferred to Final.

Non-Clean → recorded as loss/waste and cannot be sold.

Important: Accounting is not affected by product type. Only Non-Clean after QC is treated as a loss.

3) Purchase/Input into First Warehouse

Input is recorded in kg (with carton helper fields optional):

Gross kg (Required).

(Optional) # of C20 cartons → calculates kg = count × 20.

Supplier, Grade/Batch, Dates, etc. as already in the system.

Initial status: Awaiting Decision / Awaiting Filter … as per current design.

Example
Input 400 kg (or 20 C20) → shows in First Warehouse as 400 kg.

4) Shipping (from First) — Unit = C20
UI (Create/Edit Shipment)

Required fields:

Quantity (C20) = number of 20kg cartons.

Auto-calculated read-only fields:

kg = C20 × 20

C8 eq = C20 × 2.5 (for reference only)

Source Warehouse = First (fixed).

Destination = external/customer/etc. if configured, but critical is deduction from First.

On Confirm/Post:

Check availability in First (kg).

Deduct kg from First.

Sale does not touch Final directly unless you implement an internal "Transfer to Final" step.

Example
Ship 30 C20 → 30 × 20 = 600 kg deducted from First.
(For reference only: equivalent to 75 C8).

5) Sales (from Final) — Unit = C8
UI (Sales → Create/Edit Order)

Required fields:

Customer

Order Date, Priority, Notes (as designed).

Quantity (C8) = number of 8kg cartons.

Pricing modes:

Price per C8 carton → system calculates price/kg = price ÷ 8, and total.

Price per kg → system calculates price/C8 = price × 8, and total.

Auto-calculated read-only fields:

kg = C8 × 8

C20 eq = C8 × 0.4

On Confirm/Post:

Check availability in Final (kg).

Deduct kg from Final.

All accounting is stored in kg; cartons appear in reports only.

Examples

Sell 15 C8 → kg = 15 × 8 = 120. C20 eq = 120 ÷ 20 = 6.
Final decreases by 120 kg. Reports show: (15 C8 = 6 C20 = 120 kg).

Sell 12 C8 at $50 each → price/kg = 50 ÷ 8 = 6.25; total = 12 × 50 = $600.
Final decreases by 96 kg.

6) Reports and Display

Shipping Reports: Show C20 entered + kg (actual deduction) + C8 eq (info only).

Sales Reports: Show C8 entered + kg (actual deduction) + C20 eq (info only).

Inventory Cards: Always display base stock in kg, plus helpful conversion:

C20 eq = kg ÷ 20

C8 eq = kg ÷ 8

Note: Conversions may show fractions (e.g. 2.5 C8). This is for display only. Core storage is always in kg.

7) UI and Error Checks

Select error: Fix
A <Select.Item /> must have a value prop that is not an empty string
so no dropdown in the app ever crashes (default values and placeholders must be valid).

Duplicate notification bells: Unify behavior or remove the extra one.

Exchange Rate (USD/ETB): In Settings → Financial, value does not save after clicking Update. Fix saving and show success confirmation.

8) Validation Rules

No negative values allowed.

C8 and C20 must be integers; kg may allow decimals (up to 3 places).

Any entry of C8/C20 converts internally to kg before saving.

If stock is insufficient (Final in sales, First in shipping), show a clear rejection message.

9) What I Need From You Exactly

Use what’s already built. Modify incomplete parts, fill in missing fields. Do not duplicate or create extra files unless strictly necessary, and if so, explain why.

Link everything correctly:

Shipping → deducts from First (kg, entered as C20).

Sales → deducts from Final (kg, entered as C8).

Filtering/QC → Clean → Final, Non-Clean → Loss.

Acceptance tests (please run and confirm with screenshots/video):

Input 400 kg to First → Ship 30 C20 → First decreases by 600 kg.

After Clean is transferred to Final → Sell 15 C8 → Final decreases by 120 kg. Report shows 15 C8 = 6 C20 = 120 kg.

Pricing test: enter price/kg and confirm calculations match.

No Select errors anywhere in the app.

⚠️ Final Important Note:
If some of these fields, forms, or calculations are already implemented in the system but just incomplete or inconsistent, then please modify them directly. Do not add duplicate pages or files. Only add what is missing, and adjust what is already there to match the requirements exactly.
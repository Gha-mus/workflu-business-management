Step 3 — Enum Normalization & TS2769 Elimination (Drizzle + TypeScript)

Do this now. Don’t come back until this step is fully complete and the build is clean. No any, no @ts-ignore, no hacks.

Objectives (non-negotiable)
	1.	Standardize all enums end-to-end (DB schema ⇄ Drizzle types ⇄ DTOs/validators ⇄ services/routes).
	2.	Eliminate every TS2769 caused by enum/signature mismatches in Drizzle calls.
	3.	Ban string literals for enum fields in code: only typed enum values are allowed.
	4.	Zero new TypeScript errors introduced by this work.

Scope (must cover all enum domains)
	•	Purchases (e.g., purchaseStatus, purchaseType)
	•	Sales (e.g., orderStatus, invoiceStatus, returnReason)
	•	Warehouse (e.g., movementType, stockAdjustmentType)
	•	Capital (e.g., capitalEntryType, capitalStatus)
	•	Quality/Inspections (e.g., inspectionStatus, decision)
	•	Notifications (e.g., channel, templateType, scheduleStatus)
	•	Shipping (e.g., shipmentStatus, legType, carrierType)
	•	Users/Auth (e.g., role, permissionScope)
	•	Analytics/report enums (read-only filters)

If an enum exists in the DB or is used as a constrained set, it must be normalized here.

Target End State (exact)

shared/
  enums/
    purchases.ts        // typed const enums
    sales.ts
    warehouse.ts
    capital.ts
    quality.ts
    notifications.ts
    shipping.ts
    users.ts
    analytics.ts
  enums/index.ts        // re-exports
  zod/
    purchases.ts        // zod enums from typed arrays
    ...                 // (one per domain)
server/
  domains/*/repository.ts  // uses enums from shared/enums/*
  domains/*/service.ts     // accepts/returns typed enums only

Implementation Rules
	•	Single source of truth: Each enum is defined once in shared/enums/*.
	•	Const enums via literal tuples:

export const PurchaseStatus = ['draft','submitted','approved','rejected','closed'] as const;
export type PurchaseStatus = typeof PurchaseStatus[number];


	•	Zod validators from the same constants:

export const zPurchaseStatus = z.enum(PurchaseStatus);


	•	Drizzle columns use pgEnum/pgEnum() or compatible mapping so the TypeScript type equals the code enum.
	•	Repositories accept only typed values (never raw strings) and cast nothing.
	•	Services/routes convert inbound strings → enums via Zod. Reject invalid values with clear 400s.
	•	No inline string literals in comparisons or inserts. Always import from shared/enums.

Mechanical Steps
	1.	Inventory & map
	•	Grep all enum-like fields and string literals:
	•	rg -n "status\\s*:\\s*['\\\"][a-z_]+"
	•	rg -n "enum|pgEnum|createType|CHECK \\(.* IN \\("
	•	rg -n "\\.values\\(|\\.enum\\(|z\\.enum\\("
	•	Produce a table: field → allowed values → file(s).
	2.	Define enums once in shared/enums/* using literal tuples (see rules). Add Zod files in shared/zod/*.
	3.	Wire Drizzle to the enums
	•	For each table enum column, ensure Drizzle column type references the exact union type (via pgEnum or proper column factory).
	•	Update shared/schema.ts (or split schemas) so field TS type = enum type (no string).
	4.	Refactor repositories/services
	•	Replace all raw string inserts/updates/comparisons with imported enum values.
	•	Function signatures should use the enum type (e.g., status: PurchaseStatus).
	5.	Validate at boundaries
	•	Routes/controllers: use the Zod enum to parse body/query and return 400 on invalid values.
	•	Remove any as any casts around enum usage.
	6.	Kill TS2769s
	•	Re-run npx tsc --noEmit.
	•	For each remaining TS2769, correct the caller signature or the repository signature so the parameter is the enum type—not string.
	7.	Hard ban literals (mechanical check)
	•	rg -n "['\\\"](draft|submitted|approved|rejected|closed)['\\\"]" (repeat per enum set).
	•	Replace with PurchaseStatus[?] or equality against enum values.
	8.	Tests/smoke (don’t change behavior)
	•	Create purchase (draft → submitted → approved → closed).
	•	Warehouse movement with valid movementType.
	•	Sales order lifecycle status transitions.
	•	Any invalid enum input returns 400 with validation error.

Acceptance Criteria
	•	npx tsc --noEmit → 0 errors.
	•	0 occurrences of TS2769 related to enum calls.
	•	0 inline literals used where enums exist (grep proves it).
	•	All Drizzle enum columns type-check against shared/enums/* (no string fallbacks).
	•	App builds (npm run build) and boots; existing API behavior unchanged except stricter validation.
	•	A short ENUM MAP report is delivered: for each enum, the file path of definition, schema column(s), and main consumers.

Deliverables (PRs)
	•	PR A: Add shared/enums/* + shared/zod/*, wire Drizzle columns; no behavior changes.
	•	PR B: Refactor repositories/services to typed enums; remove casts/strings.
	•	PR C: Boundary validation in routes; literal-ban cleanup (prove via grep).
	•	PR D: Final TS check + TS2769 audit and summary report.

Do not return until
	•	All enum domains above are normalized.
	•	server/storage.ts and server/core/storage.ts have no enum strings left (if still present during transition).
	•	Zero TS2769 errors remain.
	•	You provide:
	•	The Enum Inventory table (values + where used).
	•	The grep proof showing no string-literal leaks.
	•	The TS report: before/after counts and the list of enum-related call sites fixed.

Proceed.
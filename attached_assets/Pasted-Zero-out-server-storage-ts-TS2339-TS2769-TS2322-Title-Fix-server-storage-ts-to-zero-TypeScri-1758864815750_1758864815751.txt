Zero out server/storage.ts (TS2339 → TS2769 → TS2322)

Title: Fix server/storage.ts to zero TypeScript errors with type-correct changes only

Objective
Bring all TypeScript errors in server/storage.ts (223) down to 0 without using any or @ts-ignore, and without changing build configs.

Scope
	•	Target file: server/storage.ts only.
	•	Touch shared types only if strictly necessary; if you must, call it out explicitly and keep the change minimal.

Constraints
	•	No any, no @ts-ignore, no disabling rules.
	•	Do not modify tsconfig, dependencies, or CI.
	•	Match schema field names exactly (snake vs camel).
	•	Respect enums and nullability from the Drizzle schema.

Required Fix Patterns
Use Drizzle-inferred shapes and a central mapper to enforce correctness:

// Types inferred from the schema:
type StorageInsert = typeof storageTable.$inferInsert;
type StorageSelect = typeof storageTable.$inferSelect;

// Minimal safe helpers:
const toStringArray = (v: string | string[] | null | undefined): string[] =>
  v ? (Array.isArray(v) ? v : [v]) : [];

const toTimestampMs = (v: Date | string | number | null | undefined): number | null => {
  if (v == null) return null;
  if (typeof v === 'number') return v;
  const d = v instanceof Date ? v : new Date(v);
  return Number.isFinite(d.valueOf()) ? d.valueOf() : null;
};

function toStorageInsert(p: any): StorageInsert {
  return {
    // ⚠ Use ONLY real schema keys (fill out based on actual schema)
    supplierId: p.supplierId,
    status: p.status as StorageInsert['status'],   // honor enum
    tags: toStringArray(p.tags),
    receivedAt: toTimestampMs(p.receivedAt) ?? Date.now(),
    // ...complete all required fields exactly as per storageTable schema
  };
}

Drizzle usage MUST be shape-correct

// Insert (single):
await db.insert(storageTable).values(toStorageInsert(payload)).returning();

// Insert (batch):
const rows: StorageInsert[] = payloads.map(toStorageInsert);
await db.insert(storageTable).values(rows).returning();

// Update:
await db.update(storageTable)
  .set({ status: newStatus as StorageInsert['status'] })
  .where(eq(storageTable.id, id));

Fix Order (priority)
	1.	TS2339 — Correct/align property names with schema; remove phantom props; rely on StorageInsert/Select.
	2.	TS2769 — Ensure calls to insert/update pass exact $inferInsert shape; fix enum/optional mismatches.
	3.	TS2322 — Normalize string↔string[], Date/string↔number timestamps, and nullables via helpers or guards.

Deliverables
	•	Updated server/storage.ts.
	•	Updated artifacts generated with the same commands as baseline:
	•	artifacts/tsc-full.txt
	•	artifacts/tsc-exit-code.txt
	•	artifacts/tsc-by-file.txt
	•	artifacts/tsc-by-code.txt
	•	(Optional for quick review)
	•	artifacts/storage-errors.txt (only errors from server/storage.ts)
	•	artifacts/storage-errors-by-code.txt (grouped for that file)

Acceptance Criteria
	•	server/storage.ts = 0 errors.
	•	Total TS errors reduced from 709 → ~486.
	•	No any, no @ts-ignore, no build/config changes.
	•	If any schema field names were ambiguous, include a short note listing them and the final names used.

Quick Checklist (what I’ll verify in your reply)
	•	File compiles cleanly with npx tsc --noEmit.
	•	Artifacts reflect the drop in total errors and show server/storage.ts: 0.
	•	Changes are type-correct and minimal, with schema-accurate keys.